@charset "UTF-8";
/*
author: Zowie Beha
license: Copyright Â© 2025 Zowie Beha
*/
/* ===========
CSS Reset
============== */
html {
  box-sizing: border-box;
  font-family: "Rubik";
  font-weight: 500;
}

*, *::before, *::after {
  box-sizing: inherit;
  margin: 0;
  padding: 0;
}

html, body {
  padding: 0;
  margin: 0;
  width: 100%;
  height: 100%;
}

/* ===========
Sticky header & Footer
============== */
.fluid-layout {
  display: grid;
  grid: auto 1fr auto/1fr;
  width: 100vw;
  height: 100vh;
}

/* ===========
Nav bar
============== */
#page-header .nav-list {
  background-color: #1D1B2C;
  border-bottom: 3px solid #cdcdd2;
  height: 3.1rem;
  width: 100%;
  padding-right: 2.3rem;
  display: flex;
  gap: 2.3rem;
  /* Mobile navbar */
}
@media screen and (max-width: 960px) {
  #page-header .nav-list {
    height: auto;
    flex-direction: column;
    gap: 1rem;
    padding: 1rem 0;
    /* .nav__items' defined width on mobile will opt out of align-items: stretch. center the 
       items on mobile as a fix. */
    align-items: center;
  }
  #page-header .nav-list .ml-auto {
    margin-left: 0;
  }
}
#page-header .nav-list .nav__item {
  /* center contents horizontally and vertically.
  we could use padding on the paragraph instead. */
  text-align: center;
  /*
   * `list-style-type: none` removes the element from the accessibility tree.
   * ::marker has a limited set of properties. `display` is not included,
   * however `font-size` is available, so we can use that to hide the list item markers.
   */
  /* Mobile nav__item */
}
#page-header .nav-list .nav__item::marker {
  font-size: 0;
}
#page-header .nav-list .nav__item .nav__link {
  /* replace with medium-width rubik font */
  line-height: 100%;
  display: inline-block;
  width: 100%;
  /* increase link click area */
  padding: 1rem 0;
  color: white;
  text-decoration: none;
  transition: 0.2s color ease-out;
}
#page-header .nav-list .nav__item .nav__link:hover {
  color: #b9c4f8;
}
@media screen and (max-width: 960px) {
  #page-header .nav-list .nav__item {
    width: 50%;
  }
}

/* ===========
Main
============== */
#page-content {
  /* A single line where we can use margin-top: auto; */
  /* With grid, we would need an additional div to act as a single item,
  which would let use use margin-top: auto;. More markup. Better than flex?
  maybe ... I just don't like nested divs that serve little purpose.  */
  display: flex;
  flex-direction: column;
  align-items: center;
  align-content: flex-start;
  height: 100%;
}
#page-content .content__subheader {
  display: flex;
  width: 100%;
  /* win via cascade */
}
#page-content .content__subheader > * {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  flex-basis: 40%;
  flex-grow: 2;
  flex-shrink: 1;
}
#page-content .content__subheader .img--headshot {
  max-width: 7.25em;
  max-height: 7.25em;
  border-radius: 100%;
  border: 3px solid #1D1B2C;
  filter: drop-shadow(0 4px 4.8px rgba(29, 27, 44, 0.5411764706));
  object-fit: cover;
  flex-grow: 1;
  flex-shrink: 0;
  flex-basis: 20%;
  position: relative;
  top: -2.3em;
}
#page-content .content__subheader .intro-sequence {
  order: -1;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  margin-left: 3.438em;
}
#page-content .content__subheader .intro-sequence p {
  font-size: 2.25em;
  /* max-height of fit-content doesn't work strangely */
  max-height: 1.2em;
  filter: drop-shadow(0 2px 1.65px rgba(0, 0, 0, 0.2431372549));
}
#page-content .content__subheader .intro-sequence p span > span:nth-child(1) {
  --i: 1 ;
}
#page-content .content__subheader .intro-sequence p span > span:nth-child(2) {
  --i: 2 ;
}
#page-content .content__subheader .intro-sequence p span > span:nth-child(3) {
  --i: 3 ;
}
#page-content .content__subheader .intro-sequence p span > span:nth-child(n) {
  /* I guess this is needed for translation to work...
  i guess I will need to read the guides again. it has to do with display mode */
  display: inline-block;
  opacity: 0;
  animation: 1.3s calc(var(--i) * 0.15s) slide-down-too-far forwards, 1s 1.15s slide-up-to-zero forwards;
}
#page-content .content__subheader .intro-sequence small {
  font-size: 1em;
  /* max-height of fit-content doesn't work strangely */
  max-height: 1.2em;
  filter: drop-shadow(0 2px 4.3px rgba(0, 0, 0, 0.0980392157));
}
#page-content .content__subheader .intro-sequence small span > span:nth-child(1) {
  --i: 1 ;
}
#page-content .content__subheader .intro-sequence small span > span:nth-child(2) {
  --i: 2 ;
}
#page-content .content__subheader .intro-sequence small span > span:nth-child(n) {
  /* I guess this is needed for translation to work...
  i guess I will need to read the guides again. it has to do with display mode */
  display: inline-block;
  opacity: 0;
  animation: 0.8s ease-out calc(var(--i) * 0.2s + 0.9s) web-dev-slide-down forwards;
}
#page-content .content__subheader .page-title {
  order: 1;
  display: flex;
  justify-content: center;
}
#page-content .content__subheader .page-title h1 {
  max-width: fit-content;
  filter: drop-shadow(0 2px 1.7px rgba(0, 0, 0, 0.2039215686));
}
@media screen and (max-width: 62.5em) {
  #page-content .content__subheader {
    flex-direction: column;
    align-items: center;
  }
  #page-content .content__subheader h1 {
    /* rem so that the unit isn't based on h1's size, rather 16px */
    margin-bottom: 0.5rem;
  }
  #page-content .content__subheader > * {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-grow: 1;
  }
  #page-content .content__subheader .intro-sequence {
    align-items: center;
    /* strange. reset must be present for children to be centered,
    yet the box model layout doesn't display any margin/padding in firefox... */
    margin: 0;
    padding: 0;
    margin-top: 0.6em;
  }
  #page-content .content__subheader img.headshot {
    max-width: 7.25em;
    max-height: 7.25em;
    border-radius: 100%;
    border: 3px solid #1D1B2C;
    filter: drop-shadow(0 4px 4.8px rgba(29, 27, 44, 0.5411764706));
    object-fit: cover;
    position: static;
  }
}

#page-footer {
  /* space between page-content and page-footer if page-content
     contents fill to touch page-footer's top box face */
  margin-top: 1rem;
  border-top: 2px solid #c4c4c4;
  display: grid;
  grid: 1fr/repeat(3, 1fr);
  align-items: center;
  justify-items: center;
  padding: 0.6rem 0;
  /* Mobile column layout for page-footer */
}
@media screen and (max-width: 35.188em) {
  #page-footer {
    grid: repeat(3, 1fr)/1fr;
    row-gap: 1em;
  }
}
#page-footer p {
  /* For when the copyright text wraps: */
  text-align: center;
}
#page-footer a.footer__link {
  color: black;
  text-decoration: underline dashed rgb(170, 170, 170) 1px;
  text-underline-offset: 2px;
  transition: 0.2s color ease-out;
}
#page-footer a.footer__link:hover {
  color: #999d53;
}

div.hr {
  width: 96%;
  opacity: 3%;
  height: 4px;
  background-color: #1D1B2C;
}

p.last-modified {
  font-size: 0.7rem;
  text-align: center;
  padding-top: 4em;
  /* padding if page-content fills enough free space to reach last-modified */
  margin-top: auto;
}

/* ===========
Keyframes
============== */
@keyframes slide-down-too-far {
  from {
    /* use translate instead of relative w/ top, as the text-align
    property will cause unsmooth animation due to centering? dunno
    maybe also a similar reason when working with flex children? */
    /* https://stackoverflow.com/questions/65995712/css-animation-is-not-smooth-it-is-shaking */
    transform: translate3d(0, -0.55em, 0);
    opacity: 0;
  }
  to {
    opacity: 1;
    transform: translate3d(0, 0.35em, 0);
  }
}
@keyframes slide-up-to-zero {
  to {
    opacity: 1;
    transform: translate3d(0, 0, 0);
  }
}
@keyframes web-dev-slide-down {
  /* use translate instead of relative w/ top, as the text-align
      property will cause unsmooth animation due to centering? dunno
      maybe also a similar reason when working with flex children? */
  /* https://stackoverflow.com/questions/65995712/css-animation-is-not-smooth-it-is-shaking */
  from {
    opacity: 0;
    transform: translate3d(0, -1.5rem, 0);
  }
  to {
    opacity: 1;
    transform: translate3d(0, -0.2em, 0);
  }
}
.pr-06 {
  padding-right: 0.6rem;
}

.ml-auto {
  margin-left: auto;
}

.text-center {
  text-align: center;
}

/* ===========
Home page content
============== */
#particles-js {
  width: 100%;
  height: 10em; /* don't completely squish the footer */
  border: 1px solid rgba(29, 27, 44, 0.1137254902);
  margin-bottom: 2em;
}

#tsparticles {
  width: 100%;
  height: 100%; /* don't completely squish the footer */
  border: 1px solid rgba(29, 27, 44, 0.1137254902);
}

div.horizontal-line {
  width: 100%;
}

/* ===========
About section
============== */
.content__details p,
.content__details small {
  padding: 0.5rem;
  width: 55%;
  margin: 0 auto;
}
.content__details p {
  /* make smaller as screen shrinks.
  how to make bigger as screen grows, but clamp to a min? 
  prob an algorithm with nested min/maxes 
  inspired by bootstrap */
  font-size: min(1.2rem, 1rem + 0.6vw);
}
.content__details small {
  display: block; /* set to block so we can alter width */
  font-size: min(0.8rem, 1rem + 0.6vw);
  width: 65%;
}

/*# sourceMappingURL=index.css.map */
